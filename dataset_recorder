from mindrove.board_shim import BoardShim, MindRoveInputParams, BoardIds, MindroveConfigMode
import time

class arc_board:
    def __init__(self, window_size, board_shim, board_id):
        self.window_size = window_size
        self.board_shim = board_shim
        self.eeg_channels = BoardShim.get_eeg_channels(board_id)
        self.trigger_channel = BoardShim.get_other_channels(19)
        self.sampling_rate = BoardShim.get_sampling_rate(board_id)
        self.num_points = window_size * self.sampling_rate
        
    def prepare_session(self):
        self.board_shim.prepare_session()
    def start_streaming(self):
        self.board_shim.start_stream()
    def stop_streaming(self):
        self.board_shim.stop_stream()
    def release_session(self):
        self.board_shim.release_session()
    
    def record_window(self):
        while True:
            if self.board_shim.get_board_data_count() >= self.num_points:
                data = self.board_shim.get_board_data(self.num_points)
                eeg_data = data[self.eeg_channels]
                triggers = data[19]
                break
        return [eeg_data,triggers]
    
    def BEEP(self):
        self.board_shim.config_board(MindroveConfigMode.BEEP)
    def BOOP(self):
        self.board_shim.config_board(MindroveConfigMode.BOOP)
    
    


if __name__ == "__main__":
    
    BoardShim.enable_dev_board_logger() # enable logger when developing to catch relevant logs 

    params = MindRoveInputParams() 
    board_id = BoardIds.MINDROVE_WIFI_BOARD
    board_shim = BoardShim(board_id, params)
    window_size = 2 # seconds
    
    arc_board(window_size, board_shim, board_id)
    